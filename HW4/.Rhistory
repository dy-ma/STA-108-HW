SSR = sum( ( (b0 + b1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (b0 + b1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
F_stat
# SSRs
SSR_NE = sum( ( (b0_NE + b1_NE * NE$V12) - mean(NE$V15) )^2 )
library(knitr)
fit <- lm(Y ~ X)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
# F statistic = MSR/MSE
SSR = sum( ( (b0 + b1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (b0 + b1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(F_stat, 1, length(X) - 2)
p
library(knitr)
fit <- lm(Y ~ X)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
# F statistic = MSR/MSE
SSR = sum( ( (b0 + b1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (b0 + b1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = pf(F_stat, 1, length(X) - 2)
p
library(knitr)
fit <- lm(Y ~ X)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
# F statistic = MSR/MSE
SSR = sum( ( (b0 + b1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (b0 + b1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
p
1 - pf(1 - alpha, 1, length(X) - 2)
1 - pf(F_stat, 1, length(X) - 2)
qf(1 - alpha, 1, length(X) - 2)
library(knitr)
fit <- lm(Y ~ X)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
# F statistic = MSR/MSE
SSR = sum( ( (b0 + b1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (b0 + b1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
p
rm(list = ls())
# 3.15 Solution concentration F test
solution_data = read.table("../datasets/solution+concentration.txt")
head(solution_data)
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
plot(Y ~ X)
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
plot(Y ~ X,
xlab = "Time", ylab = "Solution Concentration",
main = "Solution Concentration over Time")
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
fit = lm(Y ~ X)
beta_0 = fit$coe
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
fit = lm(Y ~ X)
beta_0 = fit$coefficients[1]
beta_1 = fit$coefficients[2]
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
solution_data = read.table("../datasets/solution+concentration.txt")
Y = solution_data$V1
X = solution_data$V2
fit = lm(Y ~ X)
beta_0 = fit$coefficients[1]
beta_1 = fit$coefficients[2]
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
p
p = 1 - pf(F_stat, 1, length(X) - 2)
p
kable(anova(fit))
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
kable(anova(fit))
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
kable(anova(fit))
F_stat
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
kable(anova(fit))
p
SSR = sum( ( (beta_0 + beta_1 * X) - mean(Y) )^2 )
SSE = sum( ( Y - (beta_0 + beta_1 * X) )^2 )
MSE = SSE / length(X)
MSR = SSR # 1 df
F_stat = MSR / MSE
# p val
alpha = 0.05
p = 1 - pf(1 - alpha, 1, length(X) - 2)
plot(Y ~ X)
plot(Y ~ X,
xlab = "Time", ylab = "Solution Concentration",
main = "Solution Concentration over Time")
plot(Y ~ X,
xlab = "Time", ylab = "Solution Concentration",
main = "Solution Concentration over Time")
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
}
box_cox_transform(-0.2, X, Y)
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
box_cox_transform(-0.2, X, Y)
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
for lambda in lambdas {
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
for (lambda in lambdas) {
print(lambda)
}
fit_cox = lm(Y_prime ~ X)
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$co
}
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
print(SSE)
}
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
i = 0
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
i = i + 1
print(i + SSE)
}
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
i = 0
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
i = i + 1
print(i, SSE)
}
?print
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
Min_SSE = 100
Min_lambda = 100
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
if (SSE < Min_SSE) {
Min_SSE = SSE
Min_lambda = lambdas
}
}
Min_SSE
Min_lambda
SSE
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
Min_SSE = 100
Min_lambda = 100
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
SSE
if (SSE < Min_SSE) {
Min_SSE = SSE
Min_lambda = lambdas
}
}
Min_SSE
Min_lambda
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
Min_SSE = 100
Min_lambda = 100
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
print(SSE)
if (SSE < Min_SSE) {
Min_SSE = SSE
Min_lambda = lambdas
}
}
Min_SSE
Min_lambda
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
Min_SSE = 100
Min_lambda = 100
# Calculate SSE and set smallest
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
if (SSE < Min_SSE) {
Min_SSE = SSE
Min_lambda = lambdas
}
}
Min_SSE
Min_lambda
box_cox_transform <- function(lambda, x, y) {
n = length(y)
K2 = prod(y)^(1/n)
K1 = 1/ (lambda * K2^(lambda - 1))
if (lambda != 0) {
W = K1 * (y^lambda - 1)
}
else {
W = K2 * log(y)
}
return(W)
}
# Picking Lambda
lambdas = c(-0.2, -0.1, 0, 0.1, 0.2)
Min_SSE = 100
Min_lambda = 100
# Calculate SSE and set smallest
for (lambda in lambdas) {
Y_prime = box_cox_transform(lambda, X, Y)
fit_cox = lm(Y_prime ~ X)
b0_cox = fit_cox$coefficients[1]
b1_cox = fit_cox$coefficients[2]
SSE = sum( ( Y - (b0_cox + b1_cox * Y_prime) )^2 )
if (SSE < Min_SSE) {
Min_SSE = SSE
Min_lambda = lambda
}
}
Min_SSE
Min_lambda
Y_prime = log(Y, base = 10)
Y_prime = log(Y, base = 10)
Y_prime
Y
log(0.07, base = 10)
Y_prime = log(Y, base = 10)
Y_prime = log(Y, base = 10)
fit_log = lm(Y_prime ~ X)
b0_log = fit_log$co
Y_prime = log(Y, base = 10)
fit_log = lm(Y_prime ~ X)
b0_log = fit_log$coefficients[1]
b1_log = fit_log$coefficients[2]
b0_lof
b0_log
b1_log
plot(fit_log)
plot(Y_prime ~ X)
plot(Y_prime ~ X,
xlab = "Time", ylab = "log of Solution Concentration")
plot(Y_prime ~ X,
xlab = "Time", ylab = "log(Solution Concentration)")
plot(Y_prime ~ X,
xlab = "Time", ylab = "log(Solution Concentration)",
main = "Solution Concentration (log scale) over Time ")
plot(Y_prime ~ X,
xlab = "Time", ylab = "log(Solution Concentration)",
main = "Solution Concentration (log scale) over Time ")
abline(b0_log, b1_log)
plot(Y_prime ~ X,
xlab = "Time", ylab = "log(Solution Concentration)",
main = "Solution Concentration (log scale) over Time ")
abline(b0_log, b1_log, col = "violetred")
res = fit_log$residuals
fit_log$fitted.values
res = fit_log$residuals
fitted = fit_log$fitted.values
plot(res ~ fitted)
res = fit_log$residuals
fitted = fit_log$fitted.values
plot(res ~ fitted,
xlab = "Fitted Values for Y", ylab = "Residuals of Y'")
qqnorm(res)
qqline(res, col = "violetred")
res = fit_log$residuals
fitted = fit_log$fitted.values
plot(res ~ fitted,
xlab = "Fitted Values for Y", ylab = "Residuals of Y'")
abline(h = 0)
